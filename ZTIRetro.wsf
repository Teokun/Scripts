<job id="ZTIRetro">
	<script language="VBScript" src="ZTIUtility.vbs"/>
	<script language="VBScript">

' // ***************************************************************************
' // 
' // Copyright (c) Microsoft Corporation.  All rights reserved.
' // 
' // P2V Migration for Software Assurance
' //
' // File:      ZTIRetro.wsf
' // 
' // Version:   <VERSION>
' // 
' // Purpose:   Migrate Existing Windows Machine to VHD file for Windows 7 Virtual PC
' // 
' // Usage:     cscript.exe [//nologo] ZTIRetro.wsf [/debug:true]
' // 
' // ***************************************************************************

Option Explicit
RunNewInstance


'//----------------------------------------------------------------------------
'//  Main Class
'//----------------------------------------------------------------------------

Class ZTIRetro

	
	'//----------------------------------------------------------------------------	
	'//  Main routine
	'//----------------------------------------------------------------------------

	Function Main

		oLogging.CreateEntry "---------------- Initialization ----------------", LogTypeInfo

		If IsRunningWithinVM or oUtility.Arguments.Exists("TestInVM") then

			'
			' Script is now running within the Virtual Client.
			' Install Integration Components and Cleanup.
			'
			Main = PrepareClientVHD

		ElseIf oUtility.Arguments.Exists("VALIDATION") then

			'
			' Validate the system for Physical to Virtual Migration!
			'
			Main = ValidateP2V (True)

		ElseIf oUtility.Arguments.Exists("NEWVALIDATION") then

			'
			' Validate the system for Physical to Virtual Migration!
			'
			Main = ValidateP2V (False)

		ElseIf oUtility.Arguments.Exists("STATECAPTURE") then

			'
			' Script is running within the Old OS. 
			' Ensure the Old OS is up to date, and prepare for Capture.
			'
			Main = CaptureVHD

		ElseIf oUtility.Arguments.Exists("STATERESTORE") then

			'
			' Script is running in the context of the New Windows 7 OS. 
			' Install VirtualPC and Integrate the old VHD file into the New OS.
			'
			Main = ValidateP2V (False)
			Main = RestoreVHD


		Else

			oLogging.ReportFailure "Unknown Action.", 35001
			Main = Success

		End if

	End function

	' ---------------------------------------------------------------
	'
	' Validate System is ready for Physical to Virtual Migration.
	'
	Function ValidateP2V ( bIsValidation )

		Dim sItem
		Dim oDrive

		oLogging.CreateEntry "Validate System...", LogTypeInfo

		If bIsValidation Then

			oLogging.CreateEntry "Validate During VALIDATION phase only.", LogTypeInfo

			TestAndFail  ucase(oEnvironment.Item("Architecture")) = "X86",  35011,  "Client OS is running an x64 version of Windows. Virtual PC will only support x86 Clients."
			TestAndFail UCase(oEnv("SystemDrive")) <> "X:",                 35012,  "System is running within WinPE. This scenario is not supported."

			' Check Hard Disk Size
			set oDrive = oFSO.GetDrive(oEnv("SystemDrive"))
			TestAndFail ( oDrive.TotalSize / 1024 / 1024 / 1024 ) < 127 ,   35014,  "The main System Drive " & oEnv("SystemDrive") & " is greater than 127 GB ( Size = " & ( oDrive.TotalSize / 1024 / 1024 / 1024 ) & "). Virtual PC will only support disks of less than 127 GB."

		Else

			If oEnvironment.Item("DeploymentMethod") = "SCCM" Then
				oLogging.CreateEntry "SCCM Identified", LogTypeInfo

			ElseIf oEnvironment.Item("Disk2VHDPath") <> "" then 
				oLogging.CreateEntry "Disk2VHDPath Identified", LogTypeInfo

			ElseIf oEnvironment.Item("BackupShare") <> "" and oEnvironment.Item("BackupDir") <> "" then
				oLogging.CreateEntry "BackupShare\BackupDir\BackupFile Identified", LogTypeInfo

			ElseIf oEnvironment.Item("UDShare") <> "" and oEnvironment.Item("UDDir") <> "" then
				oLogging.CreateEntry "UDShare\UDDir\BackupFile Identified", LogTypeInfo

			Else
				oLogging.ReportFailure "Neither BackupShare\BackupDir\BackupFile or Disk2VHDPath are defined, unable to restore *.vhd file for P2V Migration", 35019
				Exit Function
			End if

		End if

		If oEnvironment.Item("OSVersion") = "XP" then
			TestAndFail GetServicePackVersion >= 3,                         35013,  "Windows XP must be running SP3 or greater!"
		End if

		' Only support if the ImageBuild is 6.1.
		If len(trim(oEnvironment.Item("ImageBuild"))) > 0 then
			TestAndFail Left(oEnvironment.Item("ImageBuild"),3) = "6.1" ,   35016,  "The OS to be installed Must be Windows 7 ( 6.1 )   Found: " & oEnvironment.Item("ImageBuild")
		End if


		' Some Debugging information for PSS

		If oLogging.Debug then

			WMIDump "SELECT * FROM Win32_OperatingSystem", objWMI
			WMIDump "SELECT * FROM Win32_Mountpoint", objWMI
			WMIDump "SELECT * FROM Win32_ShadowStorage", objWMI
			WMIDump "SELECT * FROM Win32_Volume", objWMI

			for each sItem in array ( "VSS", "SWPRV", "COMSysApp", "VDS", "EventSystem", "CryptSvc" )
				WMIDump "SELECT * FROM Win32_Service WHERE Name = '" & sItem & "'", objWMI
			next

			for each sItem in array ( 9,11,15,50,51,55,57 )
				WMIDump "SELECT * from Win32_NTLogEvent Where Logfile = 'System' and EventCode = " & sItem & " and EventType !='Information'", objWMI
			next

			WMIDump "Select * from Msvm_ComputerSystem", GetVirtualizationWMIObject

			for each sItem in array( "NtfsDisable8dot3NameCreation", "NtfsMftZoneReservation", "NtfsDisableLastAccessUpdate", "Win31FileSystem" ) 
				oLogging.CreateEntry "Registry Read: [HKLM\System\CurrentControlSet\Control\FileSystem\" & sItem & "] = [" & RegRead("HKLM\System\CurrentControlSet\Control\FileSystem\" & sItem) & "]", LogTypeInfo
			next

		End if

		ValidateP2V = Success

	End function

	Function GetVirtualizationWMIObject

		set GetVirtualizationWMIObject = nothing
		on error resume next
		set GetVirtualizationWMIObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\virtualization")
		on error goto 0

	End function 


	Sub WMIDump ( sWMIQuery, objWMISvc ) 

		Dim oItem
		Dim oCollection
		DIm iCount

		If objWMISvc is Nothing then
			oLogging.CreateEntry "WMI QUery:[" & sWMIQuery & "] not ready due to WMI Provider Error", LogTypeInfo
			Exit Sub
		End if 

		oLogging.CreateEntry "WMI QUery:[" & sWMIQuery & "]", LogTypeInfo
		iCount = 0 
		set oCollection = nothing

		on error resume next
		set oCollection = objWMISvc.ExecQuery ( sWMIQuery )
		iCount = oCollection.Count
		on error goto 0

		If oCollection is nothing or iCount = 0 then
			oLogging.CreateEntry "<nothing>", LogTypeInfo
		Else
			for each oItem in oCollection
				oLogging.CreateEntry "WMI Query:[" & oItem.Path_ & "] Results: " & vbNewLine & oItem.GetObjectText_, LogTypeInfo
			next
		End if 

	End sub

	' ---------------------------------------------------------------
	'
	' Script is running within the Old OS. 
	' Ensure the Old OS is up to date, and prepare for Capture.
	'
	Function CaptureVHD

		Dim sIEFile

		oLogging.CreateEntry "Capture VHD!", LogTypeInfo

		' Install Virtual PC Remote App Support for XP and Vista
		oLogging.ReportProgress "Install remote administration support",5

		If not oFSO.FileExists(oEnvironment.Substitute("%SystemRoot%\System32\Rdpshell.exe"))  then

			If oEnvironment.Item("OSVersion") = "XP" then
				' http://support.microsoft.com/kb/961742 - Add RemoteApp support to Windows XP SP3
				CaptureVHD = RunP2VPackage("KB961742-v3.exe", "/quiet /norestart")
			ElseIf oEnvironment.Item("OSVersion") = "Vista" then
				' http://support.microsoft.com/kb/961741/ - Add RemoteApp support to Windows Vista
				CaptureVHD = RunP2VPackage("Windows6.0-KB961741-x86.msu", "")
			End if

		End if

		' Copy Shortcut.
		sIEFile = oshell.ExpandEnvironmentStrings("%ProgramFiles%\Internet Explorer\iexplore.exe" )
		If oFSO.FileExists ( sIEFile ) then
			If left(oFSO.GetFileVersion ( sIEFile ),2) = "6." then
				oLogging.CreateEntry "Found IE 6!", LogTypeInfo
				With oShell.CreateShortcut(oShell.SpecialFolders("AllUsersPrograms") & "\IE 6.lnk")
					.TargetPath = sIEFile
					.Save
				End with
			End if
		End if

		' Set up AutoLogon
		oLogging.ReportProgress "Prepare auto-admin logon",10
		PopulateAutoAdminLogon

		' Rename the computer so it comes up in the new VM with a different name
		oLogging.ReportProgress "Rename the computer",15
		RenameComputer

		' Perform the Backup
		oLogging.ReportProgress "Perform the backup",20
		CaptureVHD = DoBackup

		If oEnvironment.Item("WindowsVHDBackupMode") <> "VHDOnly" then
			' Unless WindowsVHDBackupMode = VHDOnly, we should clear ComputerBackupLocation so ZTIBackup.wsf is not used.
			oEnvironment.Item("ComputerBackupLocation") = "NONE"
		End if 

	End function 


	' ---------------------------------------------------------------
	'
	' Script is running in the context of the New Windows 7 OS. 
	' Install VirtualPC and Integrate the old VHD file into the New OS.
	'
	Function RestoreVHD

		Dim sBackupPath
		Dim sVMPath
		Dim iResult
		Dim oLink
		Dim sCmd
		Dim oFile
		Dim bFound

		oLogging.CreateEntry "Restore VHD!", LogTypeInfo

		If len(trim(oEnvironment.Item("ImageBuild"))) > 0 then
			TestAndFail Left(oEnvironment.Item("ImageBuild"),3) = "6.1" ,   35017,  "The OS to be installed Must be Windows 7 ( 6.1 )   Found: " & oEnvironment.Item("ImageBuild")
		End if 


		If oEnvironment.Item("DeploymentMethod") = "SCCM" Then

			' Running within SCCM, Use SCCM paths only.
			If oEnvironment.Item("OSDStateStorePath") = "" Then
				If oEnvironment.Item("_SMSTSUserDataPath") <> "" Then
					oEnvironment.Item("OSDStateStorePath") = oEnvironment.Item("_SMSTSUserDataPath")
				Else
					oEnvironment.Item("OSDStateStorePath") = oUtility.StatePath
				End If
			End If
			sBackupPath = oEnvironment.Item("OSDStateStorePath")

		ElseIf oEnvironment.Item("Disk2VHDPath") <> "" then 
			sBackupPath = oEnvironment.Item("Disk2VHDPath")

		ElseIf ucase(right(oEnvironment.Item("BackupFile"),4)) = ".VHD" and oEnvironment.Item("BackupShare") <> "" and oEnvironment.Item("BackupDir") <> "" then
			sBackupPath = oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("BackupDir") & "\" & oEnvironment.Item("BackupFile")

		ElseIf oEnvironment.Item("BackupShare") <> "" and oEnvironment.Item("BackupDir") <> "" then
			sBackupPath = oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("BackupDir")

		ElseIf ucase(right(oEnvironment.Item("BackupFile"),4)) = ".VHD" and oEnvironment.Item("UDShare") <> "" and oEnvironment.Item("UDDir") <> "" then
			sBackupPath = oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("UDShare") & "\" & oEnvironment.Item("UDDir")

		ElseIf oEnvironment.Item("UDShare") <> "" and oEnvironment.Item("UDDir") <> "" then
			sBackupPath = oEnvironment.Item("UDShare") & "\" & oEnvironment.Item("UDDir")

		Else
			oLogging.CreateEntry "No VHD file specified in Disk2VHDPath = [" & oEnvironment.Item("Disk2VHDPath") & "]", LogTypeWarning
			oLogging.CreateEntry "or BackupShare\BackupDir[\BackupFile] = [" & oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("BackupDir") & "\" & oEnvironment.Item("BackupFile") & "]", LogTypeWarning
			oLogging.CreateEntry "or UDShare\UDDir[\BackupFile] = [" & oEnvironment.Item("UDShare") & "\" & oEnvironment.Item("UDDir") & "\" & oEnvironment.Item("BackupFile") & "]", LogTypeWarning
			RestoreVHD = Success
			Exit Function

		End if


		' Make sure we can find the VHD file.
		oUtility.ValidateConnection sBackupPath


		' Install Virtual PC
		If objWMI.ExecQuery("select * from Win32_QuickFixEngineering where HotFixID = 'KB958559'").Count > 0 then
			oLogging.CreateEntry "Virtual PC Installed: KB958559.", LogTypeInfo

		Else

			oLogging.ReportProgress "Install Windows Virtual PC",10
			If ucase(oEnvironment.Item("Architecture")) = "X64" then
				iResult = RunP2VPackage ( "Windows6.1-KB958559-x64.msu", "")
			Else
				iResult = RunP2VPackage ( "Windows6.1-KB958559-x86.msu", "")
			End if 
			if iResult = 3010 then
				oEnvironment.Item("SMSTSRebootRequested") = "true"
				oEnvironment.Item("SMSTSRetryRequested") = "true"
				oLogging.CreateEntry "Initiating reboot to complete Windows Virtual PC installation.", LogTypeInfo
				RestoreVHD = Success
				Exit Function
			End if

		End if

		' Test for KB977206
		If objWMI.ExecQuery("select * from Win32_QuickFixEngineering where HotFixID = 'KB977206'").Count > 0 then
			oLogging.CreateEntry "Virtual PC Installed: KB977206.", LogTypeInfo

		Else

			oLogging.ReportProgress "Install Windows Virtual PC without Intel Virtualization Technology support",20
			If ucase(oEnvironment.Item("Architecture")) = "X64" then
				iResult = RunP2VPackageEx ( "Windows6.1-KB977206-x64.msu", "", false)
			Else
				iResult = RunP2VPackageEx ( "Windows6.1-KB977206-x86.msu", "", false)
			End if 
			if iResult = 3010 then
				oEnvironment.Item("SMSTSRebootRequested") = "true"
				oEnvironment.Item("SMSTSRetryRequested") = "true"
				oLogging.CreateEntry "Initiating reboot to complete Windows Virtual PC installation.", LogTypeInfo
				RestoreVHD = Success
				Exit Function
			End if

		End if


		' Remove the XP Mode shortcut if it exists

		If oFSO.FileExists(oShell.SpecialFolders("AllUsersPrograms") & "\Windows Virtual PC\Virtual Windows XP.lnk") then
			oLogging.CreateEntry "Removing Windows XP Mode shortcut.", LogTypeInfo
			oFSO.DeleteFile oShell.SpecialFolders("AllUsersPrograms") & "\Windows Virtual PC\Virtual Windows XP.lnk", true
		End if


		' Copy the VHD to a final location

		oLogging.ReportProgress "Copy the VHD file to the destination",30

		sVMPath = GetVPCPath
		oUtility.VerifyPathExistsEx sVMPath, TRUE

		If oFSO.FileExists(sBackupPath) then
			CopyOrMoveVHD sBackupPath, sVMPath

		ElseIf oFSO.FolderExists(sBackupPath) then
			for each oFile in oFSO.GetFolder(sBackupPath).Files
				If ucase(right(oFile.Path,4)) = ".VHD" then
					CopyOrMoveVHD oFile.Path, sVMPath
					exit for
				End if
			next

		Else
			oLogging.ReportFailure "VHD file not found at path: " & sBackupPath, 35007

		End if


		bFound = False
		for each oFile in oFSO.GetFolder(sVMPath).Files
			If ucase(right(oFile.Path,4)) = ".VHD" then
				bFound = True
				oLogging.CreateEntry "Verified *.vhd file: " & oFile.Path, LogTypeInfo
				exit for
			End if
		next
		If not bFound then
			oLogging.ReportFailure "VHD file not Copied locally: " & sVMPath, 35010
		End if

		'
		' Publish the virtual machine to Other Users.
		'

		If isnumeric(oEnvironment.Item("ClientVMMemory")) then
			sCmd = """" & sVMPath & "\Add Old Apps in VHD to Windows 7.hta"" /ClientVMMemory:" & oEnvironment.Item("ClientVMMemory")
		ElseIf isnumeric(oEnvironment.Item("Memory"))  then
			sCmd = """" & sVMPath & "\Add Old Apps in VHD to Windows 7.hta"" /Memory:" & oEnvironment.Item("Memory")
		Else
			sCmd = """" & sVMPath & "\Add Old Apps in VHD to Windows 7.hta"""
		End if 

		oFileHandling.CopyFile oUtility.ScriptDir & "\Add Old Apps in VHD to Windows 7.hta", sVMPath & "\", true
		oFileHandling.CopyFile oUtility.ScriptDir & "\ZTIUtility.vbs", sVMPath & "\", true

		Set oLink = oShell.CreateShortcut(oShell.SpecialFolders("AllUsersPrograms") & "\Windows Virtual PC\Add Old Apps in VHD to Windows 7.lnk")
		oLink.TargetPath = "mshta.exe"
		oLink.Arguments = sCmd 
		oLink.Save


		If oEnvironment.Item("DeploymentMethod") = "SCCM" then
			' When using SCCM, we are running within the context of the System Account, so we can't create the Virtual Machine.
			oLogging.CreateEntry "Running within SCCM, do NOT create Virtual Machine.", LogTypeInfo
		
		ElseIf oEnvironment.Item("JoinDomain") <> "" then
			oLogging.CreateEntry "Running in a Domain Joined Machine, do NOT create Virtual Machine.", LogTypeInfo
		
		ElseIf oEnvironment.Item("AdminPassword") = "" then

			oLogging.CreateEntry "User did *not* specify an AdminPassword. Do not run " & sCmd, LogTypeInfo

		Else
			oUtility.RunWithHeartbeat "mshta.exe " & sCmd & " /SILENT"

		End if

		' RestoreVHD = success

	End function


	sub CopyOrMoveVHD ( sFileName, sTargetPath )

		oLogging.CreateEntry "Attempting to move backup VHD to " & sTargetPath, LogTypeInfo

		If Mid(sFileName,2,2) = ":\" and ucase(left(sFileName,3)) = ucase(left(sTargetPath,3)) then
			oLogging.CreateEntry "Local Move: " & sFileName & "  to  " & sTargetPath, LogTypeInfo
			oFileHandling.MoveFile sFileName, sTargetPath & "\"
		Else
			oLogging.CreateEntry "Remote Copy: " & sFileName & "  to  " & sTargetPath, LogTypeInfo
			oFileHandling.CopyFile sFileName, sTargetPath & "\", false
		End if

	End sub


	Function GetVPCPath

		If oEnv("ProgramW6432") <> "" then
			GetVPCPath = oShell.ExpandEnvironmentStrings( "%ProgramW6432%\Windows Virtual PC" )
		Else
			GetVPCPath = oShell.ExpandEnvironmentStrings( "%ProgramFiles%\Windows Virtual PC" )
		End if 

	End function

	' ---------------------------------------------------------------
	'
	' Script is now running within the Virtual Client.
	' Install Integration Components and Cleanup.
	'
	Function PrepareClientVHD

		Dim iResult
		Dim sHostName
		Dim InstallPass
		Dim i
		DIm o

		oLogging.CreateEntry "Prepare Client VHD!", LogTypeInfo

		sHostName = RegRead("HKLM\SOFTWARE\Microsoft\Virtual Machine\Guest\Parameters\HostName")
		If sHostName = "" then
			wscript.sleep 2000
			sHostName = RegRead("HKLM\SOFTWARE\Microsoft\Virtual Machine\Guest\Parameters\HostName")
		End if

		' Test for Integration Components
		If sHostName = "" then

			InstallPass = oEnvironment.Item("IntegrationComponentsInstallPass")
			If not IsNumeric(InstallPass) then
				InstallPass = 0
			End if
			oLogging.CreateEntry "IntegrationComponentsInstallPass = " & InstallPass, LogTypeInfo
			InstallPass = InstallPass + 1
			oEnvironment.Item("IntegrationComponentsInstallPass") = InstallPass

			If InstallPass > 4 then
				oLogging.ReportFailure "IntegrationComponentsInstallPass has run and failed too many times. Count = " & InstallPass, 35021
			End if
			
			iResult = 0

			' Suppress Add New Hardware Wizard in XP Client. See KB938596
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\DeviceInstall\Settings\SuppressNewHWUI", 1, "REG_DWORD"
			
			oLogging.CreateEntry "AutoAdminLogon: " & RegRead ("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon"), LogTypeVerbose
			iResult = oUtility.RunWithHeartbeat ( oEnvironment.Substitute ( "msiexec.exe /qb- /l*vx %LogPath%\IntegrationCmp.log REBOOT=ReallySuppress RAILUPDATECHECKBOXSTATE=1 /i D:\Windows\IntegrationComponents.msi" ) )
			oLogging.CreateEntry "AutoAdminLogon: " & RegRead ("HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon"), LogTypeVerbose

			For Each o in GetObject("winmgmts:{(Shutdown)}//./root/cimv2").ExecQuery("select * from Win32_OperatingSystem where Primary=true")
				o.Win32Shutdown 6
			Next

			oLogging.ReportFailure "IntegrationComponents.msi installed, reboot, no matter what: " & iREsult, 35022

		Else

			oLogging.CreateEntry "Installed! Ready to cleanup." , LogTypeInfo

			oUtility.RunWithHeartbeat "bootcfg.exe /Timeout 1"

			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon", 0, "REG_SZ"
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultUserName", "", "REG_SZ"
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultDomainName", "", "REG_SZ"
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword", "", "REG_SZ"

			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\DeviceInstall\Settings\SuppressNewHWUI", 0, "REG_DWORD"
			oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\IntegrationComponents", "", "REG_SZ"

			oLogging.CreateEntry "Cleanup and Exit!" , LogTypeInfo

			oShell.Run "cscript.exe """ & oUtility.LocalRootPath & "\LTICLeanup.wsf""",,TRUE
			oShell.Run "Shutdown.exe -s -f -t 60",,TRUE

			wscript.quit 0

		End if

		PrepareClientVHD = success

	End function


	' ---------------------------------------------------------------

	Function DoBackup

		Dim bUseLocal
		Dim sNetworkStorePath
		Dim sLocalStorePath
		Dim iTotal
		Dim iAvailable
		Dim sBackupFile
		Dim sBackupPath
		Dim sBackupDrive
		Dim sCmd
		Dim iRC
		Dim sDisk2VHD
		Dim iLastPos

		DoBackup = Success


		' Backup the volume that we are running from.  The OS, user profiles, program files,
		' etc. must all be on this volume.

		sBackupDrive = UCase(oEnv("SystemDrive"))


		'//----------------------------------------------------------------------------
		'//  Check to see if we can store the backup locally.
		'//----------------------------------------------------------------------------

		bUseLocal = False
		For each oDrive in oFSO.Drives

			If oDrive.Path = sBackupDrive then

				iTotal = (oDrive.TotalSize - oDrive.AvailableSpace) / 1024
				iAvailable = oDrive.AvailableSpace / 1024
				oLogging.CreateEntry "Drive " & oDrive.DriveLetter & ": " & (oDrive.TotalSize - oDrive.AvailableSpace) / 1024, LogTypeInfo
				Exit For

			End if

		Next

		sLocalStorePath = oUtility.StatePath
		oLogging.CreateEntry "Local store path = " & sLocalStorePath, LogTypeInfo

		oLogging.CreateEntry "Total used space: " & iTotal, LogTypeInfo
		iAvailable = oFSO.GetDrive(oFSO.GetFolder(sLocalStorePath).Drive).AvailableSpace / 1024
		oLogging.CreateEntry "Available space at " & sLocalStorePath & ": " & iAvailable, LogTypeInfo
		If iAvailable > iTotal then
			
			oLogging.CreateEntry "Backup can use local path", LogTypeInfo
			bUseLocal = True
				
		End if

		If oEnvironment.Item("DeploymentType") = "NEWCOMPUTER" or oEnvironment.Item("DeploymentType") = "REPLACE" or oEnvironment.Item("DeploymentType") = "CUSTOM" then
			
			oLogging.CreateEntry "Local store not permitted", LogTypeInfo
			bUseLocal = False
				
		End If

		'//----------------------------------------------------------------------------
		'//  Figure out the paths
		'//----------------------------------------------------------------------------

		If oEnvironment.Item("DeploymentMethod") = "SCCM" Then

			'
			' Running within SCCM, Use SCCM paths only.
			'
			If oEnvironment.Item("OSDStateStorePath") = "" Then
				If oEnvironment.Item("_SMSTSUserDataPath") <> "" Then
					oEnvironment.Item("OSDStateStorePath") = oEnvironment.Item("_SMSTSUserDataPath")
				Else
					oEnvironment.Item("OSDStateStorePath") = oUtility.StatePath
				End If
			End If
			sNetworkStorePath = oEnvironment.Item("OSDStateStorePath")
			If oEnvironment.Item("DeploymentType") = "REPLACE" then
				bUseLocal = False
			ElseIf UCase(oEnvironment.Item("USMTLOCAL")) = "TRUE" Then
				bUseLocal = True
			Else
				bUseLocal = FALSE
			End If

		Else
		
			'
			' Running within Litetouch.
			'

			If UCase(oEnvironment.Item("ComputerBackupLocation")) = "NONE" and UCase(oEnvironment.Item("UserDataLocation")) = "NONE"  then

				oLogging.ReportFailure "Computer backup not possible, ComputerBackupLocation and/or UserDataLocation are set to NONE.", 35061

			'   Test ComputerBackupLocation(s)
			ElseIf ( UCase(oEnvironment.Item("ComputerBackupLocation")) = "AUTO" or UCase(oEnvironment.Item("ComputerBackupLocation")) = "" ) and bUseLocal then

				oLogging.CreateEntry "Computer backup will use local path (ComputerBackupLocation=AUTO)", LogTypeInfo

			ElseIf ( UCase(oEnvironment.Item("ComputerBackupLocation")) = "AUTO" or UCase(oEnvironment.Item("ComputerBackupLocation")) = "" ) and ( oEnvironment.Item("BackupShare") <> "" and oEnvironment.Item("BackupDir") <> "" ) then

				oLogging.CreateEntry "Computer backup will use network path (ComputerBackupLocation=AUTO)  %BackupShare%\%BackupDir%", LogTypeInfo
				sNetworkStorePath = oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("BackupDir")
				bUseLocal = false

			ElseIf UCase(oEnvironment.Item("ComputerBackupLocation")) = "NETWORK" and oEnvironment.Item("BackupShare") <> "" and oEnvironment.Item("BackupDir") <> "" then

				oLogging.CreateEntry "Computer backup will use %BackupShare%\%BackupDir%", LogTypeInfo
				sNetworkStorePath = oEnvironment.Item("BackupShare") & "\" & oEnvironment.Item("BackupDir")
				bUseLocal = false

			ElseIf UCase(oEnvironment.Item("ComputerBackupLocation")) <> "" and UCase(oEnvironment.Item("ComputerBackupLocation")) <> "NONE" and UCase(oEnvironment.Item("ComputerBackupLocation")) <> "NETWORK" and UCase(oEnvironment.Item("ComputerBackupLocation")) <> "AUTO" then

				sNetworkStorePath = oEnvironment.Item("ComputerBackupLocation")
				bUseLocal = false


			'   Test UserDataLocation(s)
			ElseIf ( UCase(oEnvironment.Item("UserDataLocation")) = "AUTO" or UCase(oEnvironment.Item("UserDataLocation")) = "" ) and bUseLocal then

				oLogging.CreateEntry "Computer backup will use local path (UserDataLocation=AUTO)", LogTypeInfo

			ElseIf ( UCase(oEnvironment.Item("UserDataLocation")) = "AUTO" or UCase(oEnvironment.Item("UserDataLocation")) = "" ) and ( oEnvironment.Item("UDShare") <> "" and oEnvironment.Item("UDDir") <> "" ) then

				oLogging.CreateEntry "Computer backup will use network path (UserDataLocation=AUTO)  %UDShare%\%UDDir%", LogTypeInfo
				sNetworkStorePath = oEnvironment.Item("UDShare") & "\" & oEnvironment.Item("UDDir")
				bUseLocal = false

			ElseIf UCase(oEnvironment.Item("UserDataLocation")) = "NETWORK" and oEnvironment.Item("UDShare") <> "" and oEnvironment.Item("UDDir") <> "" then

				oLogging.CreateEntry "Computer backup will use %UDShare%\%UDDir%", LogTypeInfo
				sNetworkStorePath = oEnvironment.Item("UDShare") & "\" & oEnvironment.Item("UDDir")
				bUseLocal = false

			ElseIf UCase(oEnvironment.Item("UserDataLocation")) <> "" and UCase(oEnvironment.Item("UserDataLocation")) <> "NONE" and UCase(oEnvironment.Item("UserDataLocation")) <> "NETWORK" and UCase(oEnvironment.Item("UserDataLocation")) <> "AUTO" then

				sNetworkStorePath = oEnvironment.Item("UserDataLocation")
				bUseLocal = false


			Else

				oLogging.ReportFailure "Computer backup not possible(2), ComputerBackupLocation and/or UserDataLocation are set to NONE.", 35062

			End if

		End if



		' If the path contains a file name, separate the two
		If Instr(1, sNetworkStorePath, ".vhd", 1) > 0 then

			iLastPos = 1
			While Instr(iLastPos, sNetworkStorePath, "\") > 0
				iLastPos = Instr(iLastPos, sNetworkStorePath, "\") + 1
			WEnd

			sBackupFile = Mid(sNetworkStorePath, iLastPos)
			sNetworkStorePath = Left(sNetworkStorePath, iLastPos - 2)

		End if


		' Figure out the name of the file

		If sBackupFile <> "" then
			' Already set, leave it alone
		ElseIf oEnvironment.Item("BackupFile") = "" then
			sBackupFile = oUtility.ComputerName & ".vhd"
		Else
			sBackupFile = oEnvironment.Item("BackupFile")
		End if

		If ucase(right(sBackupFile,4)) <> ".VHD" then
			oLogging.CreateEntry "Backup Filename changed from [" & sBackupFile & "] to [" & sBackupFile & ".VHD].", LogTypeInfo
			sBackupFile = sBackupFile & ".VHD"
		End if


		'''''''''''''''''''''''''''''''''''''''''''''''''''''''
		' Set the backup path

		If bUseLocal and sLocalStorePath <> "" then
			sBackupPath = sLocalStorePath & "\" & sBackupFile
		Else
			sBackupPath = sNetworkStorePath  & "\" & sBackupFile

			oEnvironment.Item("BackupShare") = sNetworkStorePath
			oEnvironment.Item("BackupDir") = "."
			oEnvironment.Item("BackupFile") = sBackupFile

		End if



		' Make sure we have a connection and that the path specified exists

		oUtility.ValidateConnection oFSO.GetParentFolderName(sBackupPath)
		oUtility.VerifyPathExists oFSO.GetParentFolderName(sBackupPath)


		on error resume next
		iAvailable = ofso.GetFolder(sBackupPath & "\..").Drive.FreeSpace/1024/1024/1024
		on error goto 0
		oLogging.CreateEntry "Free space on Target [ " &  iAvailable & " ]: " & sBackupPath, LogTypeInfo
		TestAndFail  iAvailable > 2,  35032,  "Verify there is enough free space for minimal VHD file. Space: " & iAvailable


		'//----------------------------------------------------------------------------
		'//  Now perform the backup
		'//----------------------------------------------------------------------------

		If oEnvironment.Item("OSVersion") <> "XP" and oEnvironment.Item("OSVersion") <> "2003" then
			iRC = oUtility.RunWithHeartbeat ( "bcdedit.exe /set detecthal on" )
		End if 
		iRC = RunP2VPackage("Disk2vhd.exe", AllDrivesFromSysPart & " """ & sBackupPath & """ -h -accepteula")
		If iRC <> 0 then
			oLogging.CreateEvent 41036, LogTypeError, "Error creating an image of drive " & sBackupPath & ", rc = " & iRc, Array(sBackupPath, iRC)
		Else
			oLogging.CreateEvent 41037, LogTypeInfo, "Successfully created image of drive " & sBackupPath, Array(sBackupPath, iRC)
		End if

		TestAndFail  oFSO.FileExists(sBackupPath) or oFSO.FileExists(sBackupPath & ".VHD"),  35024,  "VHD Backup file not created (found)! File: " & sBackupPath

		' All done

		oLogging.CreateEntry oUtility.ScriptName & " COMPLETED.  Return Value = " & iRC, LogTypeInfo
		oEnvironment.Item("BackupScriptComplete") = "YES"
		oEnvironment.Item("Disk2VHDPath") = sBackupPath
		DoBackup = iRC

	End Function


	Function AllDrivesFromSysPart

		Dim oSysPart
		Dim oDiskPart
		Dim oLogical
		DIm oLogicals
		Dim sTempFile

		AllDrivesFromSysPart = left(UCase(oEnv("SystemDrive")),2)

		for each oSysPart in objWMI.ExecQuery("Associators of {Win32_LogicalDisk.DeviceID='" & AllDrivesFromSysPart & "'} where ResultClass = Win32_DiskPartition")
			oLogging.CreateEntry "WMI path to System Partition: " & oSysPart.Path_, LogTypeInfo

			If oSysPart.Index = 0 and oSysPart.Bootable then
				oLogging.CreateEntry "System Partition is Bootable, other partitions are unintresting.", LogTypeInfo
				exit For

			Else

				for each oDiskPart in objWMI.ExecQuery("SELECT * FROM Win32_diskPartition WHERE DiskIndex = " & oSysPart.DiskIndex & " AND DeviceID <> '" & oSysPart.DeviceID & "'  and Bootable = True" )
					oLogging.CreateEntry "WMI Path to Other Partitions: " & oDiskPart.Path_, LogTypeInfo

					Set oLogicals = objWMI.ExecQuery("Associators of {" & oDiskPart.Path_ & "} where ResultClass = Win32_LogicalDisk")
					If oLogicals.Count = 0 then

						oLogging.CreateEntry "Assign Drive letter to partition: " & oDiskPart.Path_, LogTypeInfo

						sTempFile = oFSO.GetSpecialFolder(2).Path & "\" & oFSO.GetTempName
						With oFSO.CreateTextFile( sTempFile , True, false )
							.WriteLine "Select disk " & oDiskPart.DiskIndex
							.WriteLine "Select partition " & ( oDiskPart.Index + 1 )
							.WriteLine "assign"
							.Close
						end with

						oUtility.RunWithHeartbeat "diskpart.exe /s " & sTempFile

						oLogging.CreateEntry "   Rescan Logical Disks: " & oDiskPart.Path_, LogTypeInfo
						Set oLogicals = objWMI.ExecQuery("Associators of {" & oDiskPart.Path_ & "} where ResultClass = Win32_LogicalDisk")

						If oLogicals.Count = 0 then
							oLogging.CreateEntry "ERROR, unable to map partition!", LogTypeInfo
							exit function
						End if 

					End if

					For each oLogical in oLogicals
						oLogging.CreateEntry "Found other Logical Disk: " & oLogical.Path_, LogTypeInfo
						AllDrivesFromSysPart = AllDrivesFromSysPart & " " & oLogical.DeviceID
					next

				next
			End if 
		Next

	End function

	' ---------------------------------------------------------------

	Function RenameComputer

		Dim sComputerName
		Dim objComputer
		Dim iRC

		If oUtility.ComputerName = "" then
			oEnvironment.Item("OSDComputerName") = oEnv("ComputerName")
		End if 

		' Figure out an appropriate new computer name (we'll assume it's not in use)
		If len(oUtility.ComputerName) <= 12 then
			sComputerName = oUtility.ComputerName & "OLD"
		ElseIf len(oUtility.ComputerName) <= 14 then
			sComputerName = oUtility.ComputerName & "O"
		ElseIf ucase(right(oUtility.ComputerName,1)) <> "O" then
			sComputerName = left(oUtility.ComputerName,14) & "O"
		Else
			' Random
			Randomize
			sComputerName = "Win7P2V-" & right( "00000000" & hex( rnd * &hFFFFFFF ), 7 ) 
		End if 


		For Each objComputer in objWMI.ExecQuery("Select * from Win32_ComputerSystem")

			If objComputer.DomainRole = 1 or objComputer.DomainRole = 3 or objComputer.DomainRole = 4 or objComputer.DomainRole = 5 then

				If oEnvironment.Item("DomainAdminPassword") <> "" and oEnvironment.Item("DomainAdmin") <> "" then
					oLogging.CreateEntry "Renaming Domain Joined Computer from " & oUtility.ComputerName & " to " & sComputerName & "   Using Account: " & oEnvironment.Item("DomainAdminDomain") & "\" & oEnvironment.Item("DomainAdmin") , LogTypeInfo
					iRC = objComputer.Rename(sComputerName, _
						oEnvironment.Item("DomainAdminPassword"), _
						oEnvironment.Item("DomainAdminDomain") & "\" & oEnvironment.Item("DomainAdmin") )
				Else
					oLogging.CreateEntry "Renaming non Domain Joined Computer from " & oUtility.ComputerName & " to " & sComputerName, LogTypeInfo
					iRC = objComputer.Rename(sComputerName)
				End if

			Else

				oLogging.CreateEntry "Renaming non Domain Joined Computer from " & oUtility.ComputerName & " to " & sComputerName, LogTypeInfo
				iRC = objComputer.Rename(sComputerName)

			End if

			If iRC <> 0 then

				' We were unable to change the computer name of the "old" OS.
				' Instead, we will change the comptuer name of the Host machine to something *else* to ensure no computername conflicts.
				oEnvironment.Item("OSDComputerName") = "Win7New-" & right( "00000000" & hex( rnd * &hFFFFFFF ), 7 ) 
				oLogging.CreateEntry "Unable to rename Old computer: [" & sComputerName & "]  Changing host computername to : [" & oEnvironment.Item("OSDComputerName") & "]", LogTypeInfo

			Else
				oLogging.CreateEntry "Rename Computer to " & sComputerName & "   result = " & iRC, LogTypeInfo

			End if

			exit for

		Next


	End Function


	Function PopulateAutoAdminLogon

		Dim oAccount
		Dim sAdminAccount
		
		oUtility.RunWithHeartbeat("wscript.exe """ & oUtility.ScriptDir & "\LTICopyScripts.wsf""")
		TestAndFail oFSO.FileExists(outility.LocalRootPath & "\Scripts\ZTIUtility.vbs"),35012, "Verify ZTIUtility.vbs"
		
		oFileHandling.CopyFile oUtility.ScriptDir & "\ZTIRetro.wsf", outility.LocalRootPath & "\Scripts\", true
		TestAndFail oFSO.FileExists(outility.LocalRootPath & "\Scripts\ZTIRetro.wsf"),35013, "Verify ZTIRetro.wsf"
		

		' Determine Local Administrator Account

		For each oAccount in objWMI.ExecQuery("Select * From Win32_UserAccount where LocalAccount = TRUE")
			If Left(oAccount.SID, 6) = "S-1-5-" and Right(oAccount.SID, 4) = "-500" Then
				sAdminAccount = oAccount.Name
			End If
		Next


		' Make sure the Administrator account is enabled, and reset the password

		on error resume next
		Set oAccount = GetObject("WinNT://./" & sAdminAccount )
		If Err then
			oLogging.CreateEntry "Unable to retrieve local account .\" & sAdminAccount & ": " & Err.Description & " (" & Err.Number & ")", LogTypeWarning
		Else
			oLogging.CreateEntry "Succcessfully retrieved local account: " & oAccount.ADsPath, LogTypeInfo
			If oEnvironment.Item("AdminPassword") <> "" then
				oAccount.SetPassword oEnvironment.Item("AdminPassword")
				TestAndLog err = 0, "Verify P@ssword Set"
			Else
				oLogging.CreateEntry "AdminP@sword could not be read, Auto Login may not work!", LogTypeINfo
			End if 
			oLogging.CreateEntry "Reset account .\" & sAdminAccount & " to specified AdminP@ssword.", LogTypeInfo
			oAccount.AccountDisabled = false
			oAccount.SetInfo
			oLogging.CreateEntry "Enabled account .\" & sAdminAccount & ".", LogTypeInfo
		End if
		On Error Goto 0
		Err.Clear


		' Set the registry keys

		oLogging.CreateEntry "Setting AutoAdminLogon registry keys.", LogTypeInfo
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon", 1, "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoLogonCount", 9999, "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultUserName", sAdminAccount, "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultDomainName", ".", "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword", oEnvironment.Item("AdminPassword"), "REG_SZ"
		oShell.RegWrite "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\IntegrationComponents", "cscript.exe " & outility.LocalRootPath & "\Scripts\ZTIRetro.wsf", "REG_SZ"

		on error resume next
		'TestAndLog oEnvironment.Item("AdminPassword") <> "", "Verify Admin P@ssword is not blank"
		TestAndLog oEnvironment.Item("AdminPassword") = RegRead("HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword"), "Verify P@ssword Set in AutoLogon"
		on error goto 0

		oLogging.CreateEntry "Successfully set AutoAdminLogon registry keys.", LogTypeInfo

	End Function


	' ---------------------------------------------------------------

	Function RegRead( sRegValue )

		on error resume next
		RegRead = oShell.Regread( sRegValue )      
		'TestAndLog not isempty(RegRead),  "ReadRead(" & sRegValue & ")"
		on error goto 0

	end Function 

	Function IsRunningWithinVM

		Dim oInstance
		Dim sModel
		Dim sVersionString
		Dim bResult

		IsRunningWithinVM = False

		oLogging.CreateEntry "Getting virtualization info...", LogTypeInfo

		For each oInstance in objWMI.InstancesOf("Win32_ComputerSystem")
			If not IsNull(oInstance.Model) then
				sModel = Trim(oInstance.Model)
			End if
		Next

		' Determine what virtual machine environment this might be.  Get the BIOS version information
		For each oInstance in objWMI.ExecQuery("Select * from Win32_BIOS")
			sVersionString = oInstance.Version
		Next

		bResult = (sModel = "Virtual Machine") and ( left(sVersionString,5) = "A M I" )

		oLogging.CreateEntry "Finished getting virtualization info: " & bResult, LogTypeInfo

		IsRunningWithinVM = bResult

	End function


	' ---------------------------------------------------------------

	Function RunP2VPackage ( sTargetFile, sParameters ) 

		RunP2VPackage = RunP2VPackageEx ( sTargetFile, sParameters, True )

	End function


	Function RunP2VPackageEx ( sTargetFile, sParameters, bReportError ) 
	
		Dim sLocalFile

		oLogging.CreateEntry "Install package: "  & sTargetFile, LogTypeInfo
		
		If oFSO.FileExists( oEnv("TEMP") & "\" & sTargetFile ) then
			sLocalFile = oEnv("TEMP") & "\" & sTargetFile
			
		ElseIf oUtility.FindFile(sTargetFile, sLocalFile) = SUCCESS then
			' sLocalFile = sTargetFile
		
		ElseIf bReportError then
			oLogging.ReportFailure "Install package " & sTargetFile & " Not found Locally.", 35021

		Else
			oLogging.CreateEntry "Install package " & sTargetFile & " Not found Locally." , LogTypeInfo

		End if

		on error resume next
		oLogging.CreateEntry "Install package Found: "  & sLocalFile & " Version: " & oFSO.GetFileVersion(sLocalFile), LogTypeInfo
		on error goto 0

		' Install Package
		Select case ucase(oFSO.GetExtensionName( sTargetFile ))

			case "EXE"
				RunP2VPackageEx = RunWithLogging ( oEnvironment.Substitute("""" & sLocalFile & """ " & sParameters))

			case "MSU"
				RunP2VPackageEx = RunWithLogging ( oEnvironment.Substitute("wusa.exe /quiet /norestart """ & sLocalFile & """"))

			case "MSI"
				RunP2VPackageEx = RunWithLogging ( oEnvironment.Substitute("msiexec.exe /qb- REBOOT=ReallySuppress " & sParameters & " /l*vx ""%LogPath%\" & oFSO.GetBaseName( sURIPackage ) & ".log"" /i """ & sLocalFile & """"))

			case else
				oLogging.CreateEntry "Unknown install type: " & sTargetFile, LogTypeWarning
				
		End Select
		
		If RunP2VPackageEx = 3010 then
			' oEnvironment.Item("SMSTSRebootRequested") = "true"
		ElseIf RunP2VPackageEx <> 0 then
			oLogging.CreateEntry "Unknown return Code from install: " & RunP2VPackageEx, LogTypeWarning
		End if
	
	End function 


	Function RunWithLogging(sCmd)

		oLogging.CreateEntry "About to run command: " & sCmd, LogTypeInfo
		If oLogging.Debug then
			RunWithLogging = oShell.Run(sCmd, , true)
		Else
			RunWithLogging = oShell.Run(sCmd, 0 , true)
		End if

		TestAndLog RunWithLogging, "Run Command: [" & sCmd & "]"

	End function

	' ---------------------------------------------------------------
	
	Function GetServicePackVersion

		Dim oInstance

		GetServicePackVersion = 0

		For Each oInstance In objWMI.ExecQuery("select * from Win32_OperatingSystem")
			If isnumeric(oInstance.ServicePackMajorVersion) then
				GetServicePackVersion = cint(oInstance.ServicePackMajorVersion)
				exit function
			End if 
		Next

	End function


End class


	</script>
</job>
